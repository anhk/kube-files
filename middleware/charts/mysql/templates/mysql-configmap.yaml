---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  primary.cnf: |
    # Apply this config only on the primary.
    [mysqld]
    pid-file        = /var/run/mysqld/mysqld.pid
    socket          = /var/run/mysqld/mysqld.sock
    datadir         = /var/lib/mysql
    symbolic-links=0
    skip_ssl
    sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
    character-set-server=utf8
    log-bin  # 主节点配置
    [client]
    default-character-set = utf8
  replica.cnf: |
    # Apply this config only on replicas.
    [mysqld]
    pid-file        = /var/run/mysqld/mysqld.pid
    socket          = /var/run/mysqld/mysqld.sock
    datadir         = /var/lib/mysql
    symbolic-links=0
    skip_ssl
    sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION
    character-set-server=utf8
    super-read-only # 从节点配置
    [client]
    default-character-set = utf8
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-scripts
data:
  init.sh: |-
    set -ex
    if [ "$HOSTNAME" = "mysql-master-0" ]; then
      echo [mysqld] > /mnt/conf.d/server-id.cnf
      echo server-id=100 >> /mnt/conf.d/server-id.cnf
      cp /mnt/config-map/primary.cnf /mnt/conf.d/
    else
      [[ $HOSTNAME =~ -([0-9]+)$ ]] || exit 1
      ordinal=${BASH_REMATCH[1]}
      echo [mysqld] > /mnt/conf.d/server-id.cnf
      echo server-id=$((101 + $ordinal)) >> /mnt/conf.d/server-id.cnf
      cp /mnt/config-map/replica.cnf /mnt/conf.d/
    fi
  clone.sh: |-
    set -ex
    [[ -d /var/lib/mysql/mysql ]] && exit 0
    [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
    ordinal=${BASH_REMATCH[1]}
    From=$([ $ordinal -eq 0 ] && echo mysql-master-0 || echo mysql-$(($ordinal-1)) )
    ncat --recv-only ${From}.mysql-headless 3307 | xbstream -x -C /var/lib/mysql
    xtrabackup --prepare --target-dir=/var/lib/mysql         
  backup.sh: |-
    set -ex
    cd /var/lib/mysql
    # Determine binlog position of cloned data, if any.
    if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
      # XtraBackup already generated a partial "CHANGE MASTER TO" query
      # because we're cloning from an existing replica. (Need to remove the tailing semicolon!)
      cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
      # Ignore xtrabackup_binlog_info in this case (it's useless).
      rm -f xtrabackup_slave_info xtrabackup_binlog_info
    elif [[ -f xtrabackup_binlog_info ]]; then
      # We're cloning directly from primary. Parse binlog position.
      [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
      rm -f xtrabackup_binlog_info xtrabackup_slave_info
      echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
        MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
    fi

    # Check if we need to complete a clone by starting replication.
    if [[ -f change_master_to.sql.in ]]; then
      echo "Waiting for mysqld to be ready (accepting connections)"
      until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done

      echo "Initializing replication from clone position"
      mysql -h 127.0.0.1 \
        -e "$(<change_master_to.sql.in), \
            MASTER_HOST='mysql-0.mysql', \
            MASTER_USER='root', \
            MASTER_PASSWORD='', \
            MASTER_CONNECT_RETRY=10; \
          START SLAVE;" || exit 1
      # In case of container restart, attempt this at-most-once.
      mv change_master_to.sql.in change_master_to.sql.orig
    fi

    # Start a server to send backups when requested by peers.
    exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
      "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"          
