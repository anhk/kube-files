---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster-config
  labels:
    app: redis-cluster
data:
  redis.conf: |+
    cluster-enabled yes
    cluster-require-full-coverage no
    cluster-node-timeout 15000
    cluster-config-file nodes.conf
    cluster-migration-barrier 1 
    appendonly yes
    # Other cluster members need to be able to connect
    protected-mode no
  bootstrap-pod.sh: |+
    set -ex

    # Find which member of the Stateful Set this pod is running
    # e.g. "redis-cluster-0" -> "0"
    [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
    PET_ORDINAL=${BASH_REMATCH[1]}
    MY_SHARD=$(($PET_ORDINAL % $NUM_SHARDS))

    redis-server /conf/redis.conf --requirepass {{.Values.password}} &
 
    # Wait until redis-server process is ready
    until redis-cli -a {{.Values.password}} set health ok ; do sleep 1; done

    if [ $PET_ORDINAL -lt $NUM_SHARDS ]; then
      # Set up primary nodes. Divide slots into equal(ish) contiguous blocks
      NUM_SLOTS=$(( 16384 / $NUM_SHARDS ))
      REMAINDER=$(( 16384 % $NUM_SHARDS ))
      START_SLOT=$(( $NUM_SLOTS * $MY_SHARD + ($MY_SHARD < $REMAINDER ? $MY_SHARD : $REMAINDER) ))
      END_SLOT=$(( $NUM_SLOTS * ($MY_SHARD+1) + ($MY_SHARD+1 < $REMAINDER ? $MY_SHARD+1 : $REMAINDER) - 1 ))

      PEER_IP=$(perl -MSocket -e "print inet_ntoa(scalar(gethostbyname(\"redis-cluster-0.redis-cluster.$POD_NAMESPACE.svc.cluster.local\")))")
      redis-cli -a {{.Values.password}} cluster meet $PEER_IP 6379
      redis-cli -a {{.Values.password}} cluster addslots $(seq $START_SLOT $END_SLOT)
    else
      # Set up a replica
      PEER_IP=$(perl -MSocket -e "print inet_ntoa(scalar(gethostbyname(\"redis-cluster-$MY_SHARD.redis-cluster.$POD_NAMESPACE.svc.cluster.local\")))")
      redis-cli -a {{.Values.password}} --cluster add-node localhost:6379 $PEER_IP:6379 --cluster-slave
    fi

    wait